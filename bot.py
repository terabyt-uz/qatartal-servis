
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters
from datetime import datetime
import openpyxl
import os

TOKEN = '8157133012:AAHORdzEolkcF9HAuybnVes9YtDiitCJqVA'
ADMIN_CHAT_ID = 1087968824  # ‚Üê –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID

user_states = {}
user_problem_types = {}
user_descriptions = {}

def save_to_excel(user, problem_type, description):
    file_name = '–∑–∞—è–≤–∫–∏.xlsx'
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    if not os.path.exists(file_name):
        wb = openpyxl.Workbook()
        ws = wb.active
        ws.title = "–ó–∞—è–≤–∫–∏"
        ws.append(['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è', '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', '–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã', '–û–ø–∏—Å–∞–Ω–∏–µ'])
        wb.save(file_name)
    wb = openpyxl.load_workbook(file_name)
    ws = wb.active
    ws.append([now, user, problem_type, description])
    wb.save(file_name)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    keyboard = [
        [InlineKeyboardButton("üîß –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='new_request')],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data='contacts')],
        [InlineKeyboardButton("‚ÑπÔ∏è –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data='faq')],
        [InlineKeyboardButton("üëÅ –£–∑–Ω–∞—Ç—å –º–æ–π Chat ID", callback_data='get_chat_id')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    welcome_text = (
    f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ñ–≠–ö-–±–æ—Ç!\n\n"
    f"üÜî –í–∞—à Telegram ID: `{user_id}`"
)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode="Markdown")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id  # ‚Üê –≤–æ—Ç –≠–¢–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å

    if query.data == 'new_request':
        keyboard = [
            [InlineKeyboardButton("üí° –°–≤–µ—Ç", callback_data='type_üí° –°–≤–µ—Ç'),
             InlineKeyboardButton("üö∞ –í–æ–¥–∞", callback_data='type_üö∞ –í–æ–¥–∞')],
            [InlineKeyboardButton("üî• –û—Ç–æ–ø–ª–µ–Ω–∏–µ", callback_data='type_üî• –û—Ç–æ–ø–ª–µ–Ω–∏–µ'),
             InlineKeyboardButton("üßπ –£–±–æ—Ä–∫–∞", callback_data='type_üßπ –£–±–æ—Ä–∫–∞')],
            [InlineKeyboardButton("üì¶ –î—Ä—É–≥–æ–µ", callback_data='type_üì¶ –î—Ä—É–≥–æ–µ')],
        ]
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:", reply_markup=InlineKeyboardMarkup(keyboard))

    elif query.data == 'get_chat_id':
        chat_id = query.message.chat_id
        await query.edit_message_text(f"üÜî –í–∞—à Telegram ID: `{chat_id}`", parse_mode="Markdown")

    elif query.data.startswith('type_'):
        problem_type = query.data.replace('type_', '')
        user_problem_types[user_id] = problem_type
        user_states[user_id] = 'awaiting_description'
        await query.message.reply_text(f"‚úçÔ∏è –û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–±–ª–µ–º—É –ø–æ —Ç–µ–º–µ: {problem_type.lower()}")

    elif query.data == 'confirm':
        user_id = query.from_user.id
        username = query.from_user.username or query.from_user.full_name
        problem_type = user_problem_types.get(user_id)
        description = user_descriptions.get(user_id)

        if not problem_type or not description:
            await context.bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        save_to_excel(username, problem_type, description)

        msg = f"""üì© –ó–∞—è–≤–∫–∞ –æ—Ç @{username}:
üîß –¢–∏–ø: {problem_type}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}"""

        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)
        print("‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é‚Ä¶")
        await context.bot.send_message(chat_id=user_id, text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ.")

        # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        user_states.pop(user_id, None)
        user_problem_types.pop(user_id, None)
        user_descriptions.pop(user_id, None)

    elif query.data == 'cancel':
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        user_states.pop(user_id, None)
        user_problem_types.pop(user_id, None)
        user_descriptions.pop(user_id, None)

    elif query.data == 'contacts':
        await query.edit_message_text(
            "üìû –î–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∞—è: +998 93 578 60 92, +998 90 990 38 44\n"
            "üè¢ –ê–¥—Ä–µ—Å: –∫–≤–∞—Ä—Ç–∞–ª 6, –¥–æ–º 31, –∫–≤. 38\n"
            "üïí –†–∞–±–æ—Ç–∞–µ–º: —Å 9:00 –¥–æ 21:00"
        )

    elif query.data == 'faq':
        await query.edit_message_text(
            "üîπ –û—Ç–æ–ø–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–∞–µ—Ç—Å—è —Å 15 –æ–∫—Ç—è–±—Ä—è\n"
            "üîπ –ü—Ä–æ—Ç–µ—á–∫–∞? –°–æ–æ–±—â–∏—Ç–µ –∑–¥–µ—Å—å –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message_text = update.message.text

    if user_states.get(user_id) == 'awaiting_description':
        user_descriptions[user_id] = message_text
        problem_type = user_problem_types.get(user_id)
        description = message_text

        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel')]
        ]
        text = f"""üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞:
üîß –¢–∏–ø: {problem_type}
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ: {description}

–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:"""
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(
    "‚ùó –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É' –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã.\n"
    "–ó–∞—Ç–µ–º –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ."
)

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("üöÄ –ë–æ—Ç —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()
